AWSTemplateFormatVersion: 2010-09-09

##############################################################################################
# Mappings for Ubuntu AMIs
# Refer https://cloud-images.ubuntu.com/locator/ec2/ for ubuntu AMI-ID's for the LTS version
##############################################################################################
Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-15872773
    ap-northeast-2:
      AMI: ami-7b1cb915
    ap-south-1:
      AMI: ami-bc0d40d3
    ap-southeast-1:
      AMI: ami-67a6e604
    ap-southeast-2:
      AMI: ami-41c12e23
    ca-central-1:
      AMI: ami-8a71c9ee
    eu-central-1:
      AMI: ami-97e953f8
    eu-west-1:
      AMI: ami-add175d4
    eu-west-2:
      AMI: ami-ecbea388
    sa-east-1:
      AMI: ami-466b132a
    us-east-1:
      AMI: ami-da05a4a0
    us-east-2:
      AMI: ami-336b4456
    us-west-1:
      AMI: ami-1c1d217c
    us-west-2:
      AMI: ami-0a00ce72

#############################
# User inputs
#############################
Parameters:
  EC2KeyPair:
    Description: This is used to ssh to the node. If you don't have a key, please create one from AWS console and rerun the script
    Type: "AWS::EC2::KeyPair::KeyName"
  WUMUsername:
    Type: String
    Default: ""
    Description: Enter WUM user name
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Enter WUM user password to get the updated WSO2 products deployed. If not provided standard released pack will be deployed
  WSO2EnvVPC:
    Description: Existing vpc
    Type: "AWS::EC2::VPC::Id"
    Default: vpc-a5f1b9c2
  ALBCertificateARN:
    Type: String
    Description: Enter the ARN value of the certificate uploaded to ACM for Application Load Balancers
  InstanceType:
    Description: EC2 instance type [t2.micro is the free tier]
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.

################################
# Create AWS resources
################################
Resources:
  ##############################
  # Create VPC and subnets
  ##############################
  WSO2EnvPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      VpcId: !Ref WSO2EnvVPC
      Tags:
        - Key: Name
          Value: wso2-private-subnet-1
  WSO2EnvPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      VpcId: !Ref WSO2EnvVPC
      Tags:
        - Key: Name
          Value: wso2-public-subnet-1
  WSO2EnvPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.252.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      VpcId: !Ref WSO2EnvVPC
      Tags:
        - Key: Name
          Value: wso2-public-subnet-2
  WSO2EnvInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  WSO2EnvDHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainNameServers:
        - AmazonProvidedDNS
  WSO2EnvNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref WSO2EnvVPC
  WSO2EnvPublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EnvVPC
  WSO2EnvRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EnvVPC
  WSO2EnvBastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt WSO2EnvBastionEIP.AllocationId
      InstanceId: !Ref WSO2EnvBastionInstance

  ################################
  # Create network configurations
  ################################
  WSO2EnvNATGateway:
    DependsOn: gw1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt WSO2EnvEIP1.AllocationId
      SubnetId: !Ref WSO2EnvPublicSubnet1
      Tags:
        - Key: Name
          Value: WSO2EnvNatGateway
  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref WSO2EnvNetworkAcl
  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref WSO2EnvNetworkAcl
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref WSO2EnvNetworkAcl
      SubnetId: !Ref WSO2EnvPrivateSubnet1
  subnetacl2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref WSO2EnvNetworkAcl
      SubnetId: !Ref WSO2EnvPublicSubnet1
  subnetacl3:
      Type: 'AWS::EC2::SubnetNetworkAclAssociation'
      Properties:
        NetworkAclId: !Ref WSO2EnvNetworkAcl
        SubnetId: !Ref WSO2EnvPublicSubnet2
  gw1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WSO2EnvVPC
      InternetGatewayId: !Ref WSO2EnvInternetGateway
  subnetroute1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EnvPublicRouteTable1
      SubnetId: !Ref WSO2EnvPublicSubnet1
  subnetroute2:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        RouteTableId: !Ref WSO2EnvPublicRouteTable1
        SubnetId: !Ref WSO2EnvPublicSubnet2
  subnetroute3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EnvRouteTable2
      SubnetId: !Ref WSO2EnvPrivateSubnet1
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref WSO2EnvPublicRouteTable1
      GatewayId: !Ref WSO2EnvInternetGateway
    DependsOn: gw1	
  route2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref WSO2EnvRouteTable2
      NatGatewayId: !Ref WSO2EnvNATGateway
  dchpassoc1:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref WSO2EnvVPC
      DhcpOptionsId: !Ref WSO2EnvDHCPOptions

  #########################
  # Create security groups
  #########################
  WSO2EnvInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for IS EC2 compute instances
      VpcId: !Ref WSO2EnvVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  WSO2EnvLBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for IS ALB
      VpcId: !Ref WSO2EnvVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9763
        ToPort: 9763
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  WSO2EnvDBSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Security group for IS RDS
        VpcId: !Ref WSO2EnvVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ###########################
  # Create Elastic IPs
  ###########################
  WSO2EnvBastionEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  WSO2EnvEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  #######################
  # EC2 Compute instances
  #######################
  WSO2EnvBastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyPair
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: wso2-bastion-node
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EnvPublicSubnet1
          GroupSet:
            - !Ref WSO2EnvInstanceSecurityGroup
  WSO2EnvISInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: WSO2EnvDBInstance
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyPair
      Monitoring: 'false'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            cd /home/ubuntu/
            git clone https://github.com/malithie/aws-cloudformation-templates.git --depth 1
            chown -R ubuntu aws-cloudformation-templates
            cd aws-cloudformation-templates
            bash ./setup-env.sh -user ubuntu -wumuser ${WUMUsername} -wumpassowrd ${WUMPassword}
            bash ./setup-is.sh -user ubuntu -rdshost ${WSO2EnvDBInstance.Endpoint.Address} -lbhost ${WSO2EnvISApplicationLoadBalancer.DNSName}
      Tags:
        - Key: Name
          Value: wso2-is-instance1
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EnvPrivateSubnet1
          GroupSet:
            - !Ref WSO2EnvInstanceSecurityGroup

  #######################
  # Create RDS instances
  #######################
  WSO2EnvDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: 5.6.35
      DBInstanceIdentifier: wso2-is-dbinstance
      MasterUsername: root
      MasterUserPassword: root1234
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBSubnetGroupName: !Ref WSO2EnvDBSubnetGroup
      VPCSecurityGroups:
        - !Ref WSO2EnvDBSecurityGroup
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
    DeletionPolicy: Snapshot
  WSO2EnvDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds:
        - !Ref WSO2EnvPublicSubnet1
        - !Ref WSO2EnvPublicSubnet2
        - !Ref WSO2EnvPrivateSubnet1

  ########################
  # Create Load Balancers
  #######################
  WSO2EnvISApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: identity-demo
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2EnvPublicSubnet1
        - !Ref WSO2EnvPublicSubnet2
      SecurityGroups:
        - !Ref WSO2EnvLBSecurityGroup
  WSO2EnvISALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: is-carbon-9443
      Port: 443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref WSO2EnvISInstance
        Port: 9443
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EnvVPC
      Tags:
      - Key: Name
        Value: is-carbon-9443
  WSO2EnvISALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EnvISALBTargetGroup
      Certificates:
        - CertificateArn: !Ref ALBCertificateARN
      LoadBalancerArn: !Ref WSO2EnvISApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01

#####################################
# Print details of the created stack 
#####################################
Outputs:
  DatabaseURL: 
    Value: !Sub 'jdbc:mysql://${WSO2EnvDBInstance.Endpoint.Address}:${WSO2EnvDBInstance.Endpoint.Port}'
    Description: "MySQL Database URL"
  BastionEIP:
    Value: !Sub '${WSO2EnvBastionInstance.PublicIp}'
    Description: Elastic IP of the Bastion Instance
  WSO2ISPrivateIP:
      Value: !Sub '${WSO2EnvISInstance.PrivateIp}'
      Description: Private IP of the WSO2 IS Instance
  wso2isdefault:
        Value: !Sub '${WSO2EnvISApplicationLoadBalancer.DNSName}'
        Description: DNS Name of the ALB fronting WSO2 IS Instance
  ISURL:
    Value: !Sub 'https://${WSO2EnvISApplicationLoadBalancer.DNSName}/carbon'
    Description: Access URL of the Management Console

